{
  "name": "AI Assistant",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=#### INSTRUCTIONS\nExtract the content from the following HTML\n\n##### DATA\n {{ $json.textAsHtml }}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -976,
        -288
      ],
      "id": "7922e413-07b4-48ce-b062-14c343cc4fa7",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -992,
        80
      ],
      "id": "a6e8bee4-5837-402f-bded-b698619c66ea",
      "name": "Google Gemini Chat Model"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"content\": \"put extracted content here...\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -816,
        64
      ],
      "id": "858dbd3e-ab85-4e98-b751-50e25a77dde3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=##### INSTRUCTIONS\nYou are Automate Community Pro assistant. You will communicating directly with the company team via Telegram Messages.\n\nYour task now is to review an given email content and create a summary in this EXACT format:\n```\nüìß NEW EMAIL!\n\nüë§ From: [Sender Name] <[Sender address]>\nüìù Email Summary\n[Email Summary here]\n‚úÖ Key Points\n[bullet list of the most important things from the email]\nüìã Suggested Tasks\n[If appropriate create a bullet list of suggested follow-up task based on the email content]\n```\n\nThe output message will be sent via Telegram and MUST be formatted following the specific Telegram's HTML standards described here:\n\"\"\"DOCS\nTo use this mode, pass HTML in the parse_mode field. The following tags are currently supported:\n```\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<a href=\"tg://user?id=123456789\">inline mention of a user</a>\n<tg-emoji emoji-id=\"5368324170671202286\">üëç</tg-emoji>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n<pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\n<blockquote>Block quotation started\\nBlock quotation continued\\nThe last line of the block quotation</blockquote>\n<blockquote expandable>Expandable block quotation started\\nExpandable block quotation continued\\nExpandable block quotation continued\\nHidden by default part of the block quotation started\\nExpandable block quotation continued\\nThe last line of the block quotation</blockquote>\n```\n\nPlease Note:\n- Only the tags mentioned above are currently supported.\n- All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;).\n- All numerical HTML entities are supported.\n- The API currently supports only the following named HTML entities: &lt;, &gt;, &amp; and &quot;.\n- Use nested pre and code tags, to define programming language for pre entity.\n- Programming language can't be specified for standalone code tags.\n- A valid emoji must be used as the content of the tg-emoji tag. The emoji will be shown instead of the custom emoji in places where a custom emoji cannot be displayed (e.g., system notifications) or if the message is forwarded by a non-premium user. It is recommended to use the emoji from the emoji field of the custom emoji sticker.\n\"\"\"\n\n##### INPUT\n{{ JSON.stringify($json.data) }}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -432,
        -288
      ],
      "id": "7de8e14d-4b6c-4658-8e0c-ac3ba3c1b4d4",
      "name": "Basic LLM Chain 2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "71876e29-d823-47b6-8d6c-568a9b5bbb34",
              "name": "=data.content",
              "value": "={{ $('Get a message').item.json.snippet }}",
              "type": "string"
            },
            {
              "id": "db73dc63-d80b-4f19-aaca-440e20ea5637",
              "name": "data.from.address",
              "value": "={{ $('Gmail Trigger').item.json.From }}",
              "type": "string"
            },
            {
              "id": "2ea68682-cf05-43cb-ada4-4040220a1b8a",
              "name": "data.from..name",
              "value": "={{ $('Get a message').item.json.labels[1].name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        -288
      ],
      "id": "c77b8f7c-5c39-46e0-bc34-00ef981b5e4a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -432,
        64
      ],
      "id": "ee567a4f-1e61-4e24-bab9-36570af3d82b",
      "name": "Google Gemini Chat Model1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"output\": \"put the created message here\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -256,
        112
      ],
      "id": "8547fff4-90d1-49f4-837b-75011586ed86",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "content": "## New Mail Incoming",
        "height": 220
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1376,
        -352
      ],
      "typeVersion": 1,
      "id": "8157a300-45f7-41fb-aec2-4ab3b2350da4",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Review Email Data",
        "height": 320,
        "width": 420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1024,
        -96
      ],
      "typeVersion": 1,
      "id": "989fa75f-088c-4d07-85ad-3a42e1f84b73",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Evaluate Potential Followups",
        "height": 320,
        "width": 460,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -528,
        -112
      ],
      "typeVersion": 1,
      "id": "ec6430c8-ae9f-4bf6-9e5e-82a88d06407e",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Notify",
        "height": 220,
        "width": 150,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        -368
      ],
      "typeVersion": 1,
      "id": "d8061c96-70cf-44a0-9cf2-d605135a3ee8",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1104,
        -288
      ],
      "id": "082d6e2c-5f87-4a26-b483-a3c4997d12b6",
      "name": "Get a message",
      "webhookId": "a2059580-3971-4f46-b594-12e8b08b3b70"
    },
    {
      "parameters": {
        "chatId": "=1026132948",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -32,
        -288
      ],
      "id": "6b93edbf-290b-4d53-bd95-ed92807d9b9c",
      "name": "Send a text message",
      "webhookId": "d291273b-7742-476a-863f-ad2ce0f7feb0"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -1264,
        -304
      ],
      "id": "fadbd2f2-d967-421b-8777-18a319f4d95c",
      "name": "Gmail Trigger"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3056,
        896
      ],
      "id": "bc775352-9aee-497c-93b6-a223d2382212",
      "name": "Schedule Trigger [24H]"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=##### INSTRUCTIONS\nYou are Automate Community Pro task manager assistant. You will communicating directly with the company team via Telegram Messages and create a daily update message about ongoing ttasks.\n\nYou will create a daily message which will be sent every morning at 9:00 AM which will recap all the tasks which still needs to be completed.\n\nfollow this EXACT format:\n```\n‚òÄÔ∏è Daily Update [Current Date]\n\n‚û°Ô∏è Current Tasks\n[Here insert a bullet list of current uncompleted tasks, order them from the most urgent one to least urgent (based on due date)]\n\nüë©üèª‚Äçüíª [Here you will insert a concise message of what to do today based on the tasks which needs to be done, use max 4/5 sentences and a nice, polite professional tone. End the message with an orginal phylosophical food for thoughts.]\n```\n\nThe output message will be sent via Telegram and MUST be formatted following the specific Telegram's HTML standards described here:\n\"\"\"DOCS\nTo use this mode, pass HTML in the parse_mode field. The following tags are currently supported:\n```\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<a href=\"tg://user?id=123456789\">inline mention of a user</a>\n<tg-emoji emoji-id=\"5368324170671202286\">üëç</tg-emoji>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n<pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\n<blockquote>Block quotation started\\nBlock quotation continued\\nThe last line of the block quotation</blockquote>\n<blockquote expandable>Expandable block quotation started\\nExpandable block quotation continued\\nExpandable block quotation continued\\nHidden by default part of the block quotation started\\nExpandable block quotation continued\\nThe last line of the block quotation</blockquote>\n```\n\nPlease Note:\n- Only the tags mentioned above are currently supported.\n- All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;).\n- All numerical HTML entities are supported.\n- The API currently supports only the following named HTML entities: &lt;, &gt;, &amp; and &quot;.\n- Use nested pre and code tags, to define programming language for pre entity.\n- Programming language can't be specified for standalone code tags.\n- A valid emoji must be used as the content of the tg-emoji tag. The emoji will be shown instead of the custom emoji in places where a custom emoji cannot be displayed (e.g., system notifications) or if the message is forwarded by a non-premium user. It is recommended to use the emoji from the emoji field of the custom emoji sticker.\n\"\"\"\n\n##### INPUT\nCurrent Date: {{ $now.format('yyyy-MM-dd') }}\n{{ JSON.stringify($json.tasks)}}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -2272,
        896
      ],
      "id": "6720d3fd-231a-46ab-8d26-cc969d7eed20",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2304,
        1040
      ],
      "id": "8bffb714-eca0-4a9e-a7e5-69c00d19b422",
      "name": "Google Gemini Chat Model5"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"message\": \"put generate message here....\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2144,
        1040
      ],
      "id": "1248cf3a-1f3e-4647-8dc6-4743f3e0c3de",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3a80a185-d8b6-4bb3-bbb8-baf6da58dce1",
              "name": "task.title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "974cb875-9c52-428c-b24b-7bd780963346",
              "name": "task.notes",
              "value": "={{ $json.notes }}",
              "type": "string"
            },
            {
              "id": "db1fcb16-d8b4-465f-bde9-e300218aa957",
              "name": "task.status",
              "value": "={{ $json.status }}",
              "type": "string"
            },
            {
              "id": "835350c2-66d4-46a5-9873-2999d0ffb242",
              "name": "task.due",
              "value": "={{ $json.due }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2656,
        896
      ],
      "id": "4e4ab7a5-a68e-4138-b7eb-4b13bcd89c83",
      "name": "Edit Fields "
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "task",
              "renameField": true,
              "outputFieldName": "tasks"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2512,
        896
      ],
      "id": "467dbbf8-6416-4a18-9e63-c5d9969a3acc",
      "name": "Aggregate 3"
    },
    {
      "parameters": {
        "chatId": "=1026132948",
        "text": "={{ $json.output.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1936,
        896
      ],
      "id": "9cab62c1-e281-430b-ad3f-85d5fa18ec32",
      "name": "Telegram 1",
      "webhookId": "aa9a10bd-eeae-41d9-8da3-a3687b4a2eb2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ JSON.stringify($json.userMessage) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=##### INSTRUCTIONS\nYou are Automate Community Pro Telegram assistant Chatbot. You will communicating directly with the company team via Telegram Messages.\n\nYou have access to different tools which let you perform the following operations:\n- Create/Update tasks\n- Read/Write & Send Emails\n- Get scheduled events from calendar\n- Access Company's Knowledge Base Vector Store for contextual information retrevial\n- Download file from company's Google Drive\n\nIMPORTANT:\n- When retrieving data from the vector storage, you will be receive back also with the metadata of each specific piece of data retrieved. This metadata will include a field called \"document_id\" which represent the document_id to which the retrieved piece of data belongs. This is a google drive file ID, when you retrieve data from the vector storage YOU MUST ALWAYS retrieve the full documents to which the retrieved pieces of text belongs. This way you will have a more cohmprehensive context available. NEVER RETRIEVE DATA FROM THE VECTOR STORAGE AND THEN NOT DOWNLOADING THE RIGHT DOCUMENT FROM GOOGLE DRIVE, NEVER DO THAT.\n\nYour task now is to act as an helpful internal company assistant based on user requests.\n\nYou will receive a message from the user as input and yyour goal is to:\n- execute the required action using tools based on the message content (might not be necessary to always perform an operation)\n- create a final message response to send to the user\n\nThe final output message will be sent via Telegram and MUST be formatted following the specific Telegram's HTML standards described here:\n\"\"\"DOCS\nTo use this mode, pass HTML in the parse_mode field. The following tags are currently supported:\n```\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<a href=\"tg://user?id=123456789\">inline mention of a user</a>\n<tg-emoji emoji-id=\"5368324170671202286\">üëç</tg-emoji>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n<pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\n<blockquote>Block quotation started\\nBlock quotation continued\\nThe last line of the block quotation</blockquote>\n<blockquote expandable>Expandable block quotation started\\nExpandable block quotation continued\\nExpandable block quotation continued\\nHidden by default part of the block quotation started\\nExpandable block quotation continued\\nThe last line of the block quotation</blockquote>\n```\n\nPlease Note:\n- Only the tags mentioned above are currently supported.\n- All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;).\n- All numerical HTML entities are supported.\n- The API currently supports only the following named HTML entities: &lt;, &gt;, &amp; and &quot;.\n- Use nested pre and code tags, to define programming language for pre entity.\n- Programming language can't be specified for standalone code tags.\n- A valid emoji must be used as the content of the tg-emoji tag. The emoji will be shown instead of the custom emoji in places where a custom emoji cannot be displayed (e.g., system notifications) or if the message is forwarded by a non-premium user. It is recommended to use the emoji from the emoji field of the custom emoji sticker.\n\"\"\"\n\nYou will be provided the user input message in the following format:\n```json\n{\n \"userMessage\": {\n       \"username\": \"username here\",\n       \"firstName\": \"user first Name if provided\",\n       \"content\": \"message content\"\n }\n}\n```\n\nAdditional Context\nCurrent Date {{ $now.format('yyyy-MM-dd') }}\nYour gender is Female"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2352,
        -288
      ],
      "id": "bff0c916-b03d-4bd3-ad92-878a6da26eb1",
      "name": "AI Agent1",
      "retryOnFail": false
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2704,
        -176
      ],
      "id": "0e2689c7-464d-4fbf-bc0f-e9ac63cd7892",
      "name": "Google Gemini Chat Model6"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -2576,
        -176
      ],
      "id": "1d8d6b3b-23ca-4824-945c-ad6885ca1baf",
      "name": "Postgres Chat Memory"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "company_knowledge_base",
        "toolDescription": "Retrieve Documents (pieces of full documents) Data from Company Knowledge base Vector Store",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        -2944,
        240
      ],
      "id": "4d1f450f-3a56-44b0-aec6-141000d081da",
      "name": "Supabase Vector Store1"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2448,
        -176
      ],
      "id": "a8bad80a-bc85-4ffa-a096-c4ec7954db0c",
      "name": "Embeddings OpenAI1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -2176,
        416
      ],
      "id": "534f5b1d-e83d-41be-ab7b-c0a39121edb7",
      "name": "Calculator"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all events in Google Calendar (1 Week Time window)",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "paoloanzani@automatecommunity.pro",
          "mode": "list",
          "cachedResultName": "paoloanzani@automatecommunity.pro"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -2048,
        416
      ],
      "id": "fe0531d2-6a32-4aeb-a370-fc954640fbd4",
      "name": "Google Calendar"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b3858ab9-9f05-4505-92b0-b6409ee85f4c",
              "name": "userMessage.first_name",
              "value": "={{ $json.message.from.first_name }}",
              "type": "string"
            },
            {
              "id": "a9b22d3f-b157-4519-898a-e60eeba51029",
              "name": "userMessage.username",
              "value": "={{ $json.message.from.username }}",
              "type": "string"
            },
            {
              "id": "accd287b-c8ae-459f-b8c0-98a9d1151e0f",
              "name": "userMessage.content",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2912,
        -288
      ],
      "id": "0667b289-fc0f-424c-8093-4ea4c1efbbb3",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2016,
        -288
      ],
      "id": "81156376-74eb-4e91-9bc5-6825bcd828bf",
      "name": "Telegram1",
      "webhookId": "92e0da79-e925-483c-9099-a4fc2b0052ec"
    },
    {
      "parameters": {
        "description": "Get the current time (CEST - UTC +2)",
        "jsCode": "const currentDateTimeUTCPlus2 = new Date().toLocaleString('en-US', {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false, // Use 24-hour format\n  timeZone: 'Europe/Rome' // Or 'Europe/Berlin', 'Europe/Paris', etc. for UTC+2 during summer\n});\n\nreturn currentDateTimeUTCPlus2"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        -1936,
        416
      ],
      "id": "a7c59266-8e67-4b12-aa0c-72189bd3ba00",
      "name": "Code Tool"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Message Object\",\n  \"description\": \"Schema for a simple message object containing a text message.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"The text content of the message.\"\n    }\n  },\n  \"required\": [\n    \"message\"\n  ],\n  \"additionalProperties\": false\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1632,
        112
      ],
      "id": "26c44478-5f35-445e-a0ec-bebaa6242c00",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        -1936,
        -48
      ],
      "id": "2db957d9-56bc-4238-9e6f-9a653d89fee4",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1792,
        112
      ],
      "id": "8ef1ae75-c779-4197-8c95-497217f5c2dc",
      "name": "Google Gemini Chat Model7"
    },
    {
      "parameters": {
        "content": "## AI Assitant Trigger\n- Use @get_id_bot to get your chat id",
        "height": 240,
        "width": 330,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3136,
        -368
      ],
      "typeVersion": 1,
      "id": "a77fda8f-7e56-4371-82f2-6f40eff2e3a1",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Agent Core\n- **Customize Prompt Details Here**",
        "height": 240,
        "width": 350,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2416,
        -368
      ],
      "typeVersion": 1,
      "id": "d2dce2d4-b210-4dcf-9c2a-06e17fb12d74",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## Send Created Message",
        "height": 240,
        "width": 190,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2048,
        -368
      ],
      "typeVersion": 1,
      "id": "43377048-222a-4ff1-bfc5-c0926b56b436",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## Tool Suite\n- Google Tasks\n- Gmail\n- Google Drive\n- Google Calendar",
        "width": 290,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1488,
        16
      ],
      "typeVersion": 1,
      "id": "d7f47efc-78e5-4cf0-a271-db251bf39a94",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## Daily Trigger (24H)",
        "height": 220,
        "width": 260,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3136,
        816
      ],
      "typeVersion": 1,
      "id": "846731d6-fe67-4ee1-8e5d-a0d132c36228",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "content": "## Get Ongoing Tasks",
        "height": 220,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2784,
        832
      ],
      "typeVersion": 1,
      "id": "b5a408bc-f525-48e4-a842-fe3f746a7fc2",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "content": "## Create Daily TODO Message",
        "height": 360,
        "width": 380,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2352,
        832
      ],
      "typeVersion": 1,
      "id": "c048e53f-5e00-49ed-ab1b-9a056e9cf1de",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "chatIds": "=1026132948"
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -3088,
        -288
      ],
      "id": "59163234-48fb-4649-97d3-faecf95feec8",
      "name": "Telegram Trigger",
      "webhookId": "7a0e571b-9b2d-4aa1-b989-f18c0ca0313c"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Send a message in Gmail",
        "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To', ``, 'string') }}",
        "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
        "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -2624,
        304
      ],
      "id": "f7505be7-c50e-40f0-9b39-22436f44a358",
      "name": "Send a message in Gmail",
      "webhookId": "a2f8dc5c-51b3-42c9-9b7a-eae9b7d55dc3"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Download a file from Google Drive by ID",
        "operation": "download",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File', ``, 'string') }}"
        },
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain",
              "slidesToFormat": "application/pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDriveTool",
      "typeVersion": 3,
      "position": [
        -2304,
        240
      ],
      "id": "2c7cd973-92f9-4ee9-b712-d9c490e933dd",
      "name": "Download file in Google Drive"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get N last messages in Gmail",
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -2048,
        112
      ],
      "id": "ed415e38-cd91-4179-9001-83ee00e26640",
      "name": "Get many messages in Gmail",
      "webhookId": "6241ddd3-b237-4f48-8a6d-e0303e3008a1"
    },
    {
      "parameters": {
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {
          "dueDate": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Due_Date', ``, 'string') }}",
          "notes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        -2512,
        304
      ],
      "id": "517a1be8-92b9-476c-92db-f831885c2070",
      "name": "Create a task in Google Tasks"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Update a task in Google Tasks",
        "operation": "update",
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', ``, 'string') }}",
        "updateFields": {
          "dueDate": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Due_Date', ``, 'string') }}",
          "notes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}",
          "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        -1936,
        256
      ],
      "id": "7884060a-6197-414f-a2fc-55faa38649d6",
      "name": "Update a task in Google Tasks1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "returnAll": true,
        "additionalFields": {
          "showCompleted": false
        }
      },
      "type": "n8n-nodes-base.googleTasks",
      "typeVersion": 1,
      "position": [
        -2768,
        896
      ],
      "id": "fb058bbe-6b1e-40be-8f85-3e9879ddd70e",
      "name": "Get many tasks"
    },
    {
      "parameters": {
        "operation": "getAll",
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "returnAll": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        -2416,
        416
      ],
      "id": "8a62a5dd-5924-4e1a-9238-7ccc7dcfd3f9",
      "name": "Get many tasks in Google Tasks"
    },
    {
      "parameters": {
        "operation": "get",
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        -2096,
        256
      ],
      "id": "7552ff4d-c45d-480e-a620-62d676de2c14",
      "name": "Get a task in Google Tasks"
    },
    {
      "parameters": {
        "operation": "delete",
        "task": "MTIzMDUzMzgyMTg3Mjk1MTExNTk6MDow",
        "taskId": "="
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        -2304,
        544
      ],
      "id": "1ba1f3fe-e916-455b-a5bd-f40dfcdad1ec",
      "name": "Delete a task in Google Tasks"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.From }}",
              "rightValue": "opay",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "9a7eafa7-15c4-449f-8612-4488c9f1bb4c",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a6508f37-73ed-4513-87c1-8fce81e8a4ca",
      "name": "Filter Bank Messages",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1008,
        784
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyWeek"
            }
          ]
        },
        "filters": {
          "q": "transfer successful",
          "sender": "opay"
        }
      },
      "id": "57d26e32-c410-4aea-b8f9-aa95ea40f86b",
      "name": "Gmail Trigger1",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [
        -1456,
        752
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a banking transaction analyzer. Analyze the following banking message and extract transaction details in JSON format.\n\nMessage: {{ $json.output.content }}\n\nExtract the following information and return ONLY a valid JSON object:\n{\n  \"transactionType\": \"credit\" or \"debit\",\n  \"amount\": numeric_value_only,\n  \"currency\": \"NGN\" or detected currency,\n  \"status\": \"completed\", \"pending\", \"failed\", or \"processing\",\n  \"description\": \"brief description of transaction\",\n  \"category\": \"earnings\", \"spending\", or \"pending\",\n  \"extractedDate\": \"YYYY-MM-DD format if found in message\",\n  \"confidence\": 0.0 to 1.0 confidence score,\n  \"isTransaction\": true or false\n}\n\nRules:\n- Credit = money received (earnings)\n- Debit = money sent/spent (spending)\n- Pending = any unconfirmed transactions\n- Amount should be numeric only (no currency symbols)\n- If not a transaction, set isTransaction to false\n- Be very accurate with transaction type detection",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -32,
        800
      ],
      "id": "527d9b30-a7ac-4b5b-896e-190a901b928f",
      "name": "Basic LLM Chain "
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        16,
        1056
      ],
      "id": "00a41926-9376-49f8-89f9-a9b878c61d06",
      "name": "Google Gemini Chat Model3"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "={\n \"transactionType\": \"debit\",\n \"amount\": 100.0,\n \"currency\": \"NGN\",\n \"status\": \"completed\",\n \"description\": \"Transfer to tochukwu PRECIOUS ahuruezenma (OPay account 7010724735)\",\n \"category\": \"spending\",\n \"extractedDate\": \"2025-07-13\",\n \"confidence\": 1.0,\n \"isTransaction\": true\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        304,
        1072
      ],
      "id": "18133e4b-4de9-4c80-87b9-5843ad4b4399",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1216,
        784
      ],
      "id": "bc8535cb-8fa0-47c7-93e0-c1e262656932",
      "name": "Get many messages",
      "webhookId": "a2059580-3971-4f46-b594-12e8b08b3b70"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "71876e29-d823-47b6-8d6c-568a9b5bbb34",
              "name": "=data.transactiontype",
              "value": "={{ $json.output.transactionType }}",
              "type": "string"
            },
            {
              "id": "db73dc63-d80b-4f19-aaca-440e20ea5637",
              "name": "data.amount",
              "value": "={{ $json.output.amount }}",
              "type": "number"
            },
            {
              "id": "253c036f-a91d-445e-992a-6e47bbafff6d",
              "name": "=data.description",
              "value": "={{ $json.output.description }}",
              "type": "string"
            },
            {
              "id": "ced46927-4b0d-40df-9866-0995167b9ac5",
              "name": "data.date",
              "value": "={{ $json.output.extractedDate }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -336,
        784
      ],
      "id": "ff0e4852-a6af-4cb6-864c-a1019296119e",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a banking transaction analyzer. Analyze the following banking message and extract transaction details in JSON format.\n\nMessage: {{ $json.snippet }}\nBank: {{ $json.From }}\nDate: {{ $json.internalDate }}\n\nExtract the following information and return ONLY a valid JSON object:\n{\n  \"transactionType\": \"credit\" or \"debit\",\n  \"amount\": numeric_value_only,\n  \"currency\": \"NGN\" or detected currency,\n  \"status\": \"completed\", \"pending\", \"failed\", or \"processing\",\n  \"description\": \"brief description of transaction\",\n  \"category\": \"earnings\", \"spending\", or \"pending\",\n  \"extractedDate\": \"YYYY-MM-DD format if found in message\",\n  \"confidence\": 0.0 to 1.0 confidence score,\n  \"isTransaction\": true or false\n}\n\nRules:\n- Credit = money received (earnings)\n- Debit = money sent/spent (spending)\n- Pending = any unconfirmed transactions\n- Amount should be numeric only (no currency symbols)\n- If not a transaction, set isTransaction to false\n- Be very accurate with transaction type detection",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -688,
        800
      ],
      "id": "42f528ed-67fb-47a9-ab31-be605dfd9757",
      "name": "Basic LLM Chain 3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -768,
        1040
      ],
      "id": "d7ae347a-dacc-4827-9809-e5397965861d",
      "name": "Google Gemini Chat Model8"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"content\": \"put extracted content here...\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -528,
        1040
      ],
      "id": "30260f2a-8496-4d24-9747-1e64be91e580",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "chatId": "1026132948",
        "text": "=üí∞ Transaction Alert\n\nüîÑ Type: {{ $json.output.transactionType }}\nüíµ Amount: {{ $json.output.currency }} {{ $json.output.amount }}\nüìù Description: {{ $json.output.description }}\nüìÖ Date: {{ $json.output.extractedDate }}\n‚úÖ Status: {{ $json.output.status }}\nüìä Category: {{ $json.output.category }}\nüéØ Confidence: {{ Math.round($json.output.confidence * 100) }}%",
        "replyMarkup": "forceReply",
        "forceReply": {},
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        384,
        816
      ],
      "id": "f42c48d0-44ce-44e0-af28-6a45bff45304",
      "name": "Send a text message1",
      "webhookId": "55d7eaf5-8f23-4d06-8490-f40dd7b8566b"
    },
    {
      "parameters": {
        "content": "## Transaction Alerts ",
        "height": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1504,
        672
      ],
      "typeVersion": 1,
      "id": "1689f66e-6120-47aa-b97a-7e9516f5bfec",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.output?.isTransaction }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "condition2",
              "leftValue": "=",
              "rightValue": 100,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "a5fa15dc-da18-45af-a21e-b4fbfc1d327d",
              "leftValue": "={{ $json.output.status }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "aaa0ac90-dd09-4aea-84ca-bff38640c72b",
      "name": "Filter Valid Transactions1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        592,
        896
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## üß± Workflow Highlights (Step Summary)\n- **Trigger: Gmail (filters by sender & keyword).**\n\n- **Filter: Check if message is from \"Opay\".**\n\n- **AI Parsing: Use Google Gemini (via LangChain Chain).**\n\n- **Transaction Filter: Pass only credit or debit types.**\n\n- **Logging: Save to Google Sheet (Transactions sheet).**\n\n- **Telegram Notification: Alert on new transaction.**\n\n- **Error Trigger: Catches any failure in the flow.**\n\n- **Weekly Cron Trigger: Aggregates totals and sends Telegram financial report.**",
        "height": 620,
        "width": 900
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -976,
        1312
      ],
      "typeVersion": 1,
      "id": "e75ccb5d-6e6f-4432-9547-aabbc0c87555",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54300a2b-12fc-45b4-a3c3-72f0f4e71ab7",
              "name": "output.description",
              "value": "={{ $json.output.description }}",
              "type": "string"
            },
            {
              "id": "fc5d3e8e-1ab4-4129-8f92-8117bf121704",
              "name": "output.amount",
              "value": "={{ $json.output.amount }}",
              "type": "string"
            },
            {
              "id": "fbb080a3-3fc4-407d-b83c-118b1f104c08",
              "name": "output.currency",
              "value": "={{ $json.output.currency }}",
              "type": "string"
            },
            {
              "id": "ac8ea97e-d71c-400d-8f91-75fb8f2f46c3",
              "name": "output.transactionType",
              "value": "={{ $json.output.transactionType }}",
              "type": "string"
            },
            {
              "id": "f7574839-8ff2-441e-8c49-bc49ccabeac2",
              "name": "output.extractedDate",
              "value": "={{ $json.output.extractedDate }}",
              "type": "string"
            },
            {
              "id": "bdaa7cb5-e9e6-4dda-9c3a-0deeb51a8ad9",
              "name": "output.transferredTo",
              "value": "={{ $json.output.transferredTo }}",
              "type": "string"
            },
            {
              "id": "8142da38-f206-4dad-93ea-8c617d603c44",
              "name": "output.transactionId",
              "value": "={{ $json.output.transactionId }}",
              "type": "string"
            },
            {
              "id": "034e3bee-c765-4bdf-b79d-b179b20f2904",
              "name": "output.isTransaction",
              "value": "={{ $json.output.isTransaction }}",
              "type": "string"
            },
            {
              "id": "c5061e6d-295d-4c9c-aa09-ce5000c9777b",
              "name": "output.confidence",
              "value": "={{ $json.output.confidence }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -832,
        1744
      ],
      "id": "a44d91c0-bba3-4ae5-b4a9-9b46fe29d65f",
      "name": "Format Transaction Data"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1168,
        2016
      ],
      "id": "5ad48c4d-d885-4d18-a6d4-aa8132072745",
      "name": "Google Gemini Chat Model 2"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"transactionType\": \"credit or debit\",\n  \"amount\": \"numeric_value_only\",\n  \"currency\": \"NGN or detected currency\",\n  \"status\": \"completed, pending, failed, or processing\",\n  \"description\": \"brief description of transaction\",\n  \"category\": \"earnings, spending, or pending\",\n  \"extractedDate\": \"YYYY-MM-DD format if found in message\",\n  \"confidence\": \"0.0 to 1.0 confidence score\",\n  \"isTransaction\": \"true or false\",\n  \"transactionId\": \"transaction identifier if available\",\n  \"transferredTo\": \"recipient account number or identifier if applicable\"\n}",
        "autoFix": true,
        "customizeRetryPrompt": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -992,
        2064
      ],
      "id": "f82e88a1-e56c-4258-b833-deb9a4060754",
      "name": "Content Parser"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -2000,
        1376
      ],
      "id": "75184090-b502-44a9-8fd5-3c7f46470112",
      "name": "Weekly Report Trigger"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4",
          "mode": "list",
          "cachedResultName": "TRans Analy",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Transactions",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        -1808,
        1376
      ],
      "id": "4b8501c1-5825-4ab2-8eb3-d4af721651ec",
      "name": "Get Weekly Transactions"
    },
    {
      "parameters": {
        "jsCode": "// Calculate weekly financial summary\nconst transactions = $input.all();\nlet totalCredit = 0;\nlet totalDebit = 0;\nlet creditCount = 0;\nlet debitCount = 0;\nconst categories = {};\n\ntransactions.forEach(transaction => {\n  const data = transaction.json || transaction;\n  \n  // Parse amount - remove any currency symbols and convert to number\n  const amountStr = data.Amount || data.amount || \"0\";\n  const amount = parseFloat(amountStr.toString().replace(/[^\\d.-]/g, '')) || 0;\n  \n  // Get transaction type\n  const type = (data[\"Transaction Type\"] || data.transactionType || \"\").toLowerCase();\n  \n  // Get category\n  const category = data.Category || data.category || 'Unknown';\n  \n  // Process based on transaction type\n  if (type === 'credit' || type.includes('credit')) {\n    totalCredit += amount;\n    creditCount++;\n  } else if (type === 'debit' || type.includes('debit')) {\n    totalDebit += amount;\n    debitCount++;\n  }\n  \n  // Category breakdown\n  if (!categories[category]) {\n    categories[category] = { amount: 0, count: 0 };\n  }\n  categories[category].amount += amount;\n  categories[category].count++;\n});\n\nconst netFlow = totalCredit - totalDebit;\nconst weekStart = new Date();\nweekStart.setDate(weekStart.getDate() - 7);\n\n// Return in the exact format requested\nreturn {\n  weekStart: weekStart.toISOString().split('T')[0],\n  weekEnd: new Date().toISOString().split('T')[0],\n  totalCredit,\n  totalDebit,\n  netFlow,\n  creditCount,\n  debitCount,\n  totalTransactions: creditCount + debitCount,\n  categories,\n  averageTransaction: (totalCredit + totalDebit) / (creditCount + debitCount) || 0\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        1376
      ],
      "id": "3bbeee4e-69a4-43b8-b535-4f894dad856c",
      "name": "Calculate Weekly Summary"
    },
    {
      "parameters": {
        "chatId": "1026132948",
        "text": "=üìä Weekly Financial Report\nüìÖ Period: {{ $json.weekStart }} to {{ $json.weekEnd }}\n\nüí∞ SUMMARY:\n‚Ä¢ Total Received: NGN {{ $json.totalCredit.toLocaleString() }} ({{ $json.creditCount }} transactions)\n‚Ä¢ Total Spent: NGN {{ $json.totalDebit.toLocaleString() }} ({{ $json.debitCount }} transactions)\n‚Ä¢ Net Flow: NGN {{ $json.netFlow.toLocaleString() }}\n‚Ä¢ Average Transaction: NGN {{ $json.averageTransaction.toFixed(2) }}\n\nüìà EXPENSES: NGN {{ $json.totalExpenses.toLocaleString() }}\n\nüìä CATEGORY BREAKDOWN:\n{{ Object.entries($json.categories).map(([cat, data]) => `‚Ä¢ ${cat}: NGN ${data.amount.toLocaleString()} (${data.count} transactions)`).join('\\n') }}\n\nüî¢ Total Transactions: {{ $json.totalTransactions }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1408,
        1376
      ],
      "id": "10e8723c-ba7e-4a66-befb-4118dcc43497",
      "name": "Send Weekly Report",
      "webhookId": "84a50ad1-c786-444d-8523-58e53584e622"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4",
          "mode": "list",
          "cachedResultName": "TRans Analy",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "Weekly_Reports",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        -1200,
        1376
      ],
      "id": "281edad7-2e7f-4f4d-9449-2cf01c98a828",
      "name": "Save Weekly Report"
    },
    {
      "parameters": {
        "content": "## Transaction Processing Pipeline\n\n‚úÖ Error handling enabled\n‚úÖ Filters debit/credit only\n‚úÖ Confidence threshold: 70%\n‚úÖ Google Sheets integration\n‚úÖ Weekly reports",
        "height": 300,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2208,
        1696
      ],
      "typeVersion": 1,
      "id": "0d22d3a6-3c9a-48a2-9392-c74c8695ac31",
      "name": "Main Pipeline Notes"
    },
    {
      "parameters": {
        "content": "## Weekly Reports\n\nüìÖ Runs every Monday at 9 AM\nüìä Calculates weekly summary\nüì± Sends Telegram report\nüíæ Saves to Google Sheets",
        "height": 200,
        "width": 350
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2240,
        1296
      ],
      "typeVersion": 1,
      "id": "3dcc460f-e942-47d8-b675-72923277fd25",
      "name": "Weekly Report Notes"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.subject }}",
              "rightValue": "Transfer Successful",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "239a34dd-2bb1-47bc-8ee6-d674f5d5b56f",
      "name": "Filter Bank Messages2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1552,
        1792
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "Transfer Successful"
        },
        "options": {}
      },
      "id": "f10685f8-4143-4e08-810a-3c5baad3e756",
      "name": "Gmail Trigger4",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [
        -1952,
        1744
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 30,
        "simple": false,
        "filters": {
          "q": "transfer successful"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1728,
        1792
      ],
      "id": "7ce04890-903f-4069-8477-a256bf52ed35",
      "name": "Get many messages2",
      "webhookId": "a2059580-3971-4f46-b594-12e8b08b3b70",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a banking transaction analyzer. Analyze the following banking message and extract transaction details in JSON format.\nmessage: {{ $json.textAsHtml }}\n\nExtract the following information and return ONLY a valid JSON object:\n{\n  \"transactionType\": \"credit\" or \"debit\",\n  \"amount\": numeric_value_only,\n  \"currency\": \"NGN\" or detected currency,\n  \"status\": \"completed\", \"pending\", \"failed\", or \"processing\",\n  \"name\":  \"the name\",\n  \"category\": \"earnings\", \"spending\", or \"pending\",\n  \"extractedDate\": \"YYYY-MM-DD format if found in message\",\n  \"confidence\": 0.0 to 1.0 confidence score,\n  \"isTransaction\": true or false\n  \"transactionId\": \"transaction no\"\n  \"transferedTo\": \"account no\"\n}\n\nRules:\n- Credit = money received (earnings)\n- Debit = money sent/spent (spending)\n- Pending = any unconfirmed transactions\n- Amount should be numeric only (no currency symbols)\n- If not a transaction, set isTransaction to false\n- Be very accurate with transaction type detection\n- Transaction ID = the Transaction No Should be numeric\n- Transfered To = this will be the account number i sent money to",
        "hasOutputParser": true,
        "needsFallback": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -1264,
        1792
      ],
      "id": "fb1edd49-06bc-4a07-821e-519323c4541e",
      "name": "Basic LLM Chain 5",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "1026132948",
        "text": "=üí∞ Transaction Alert\n\nüîÑ Type: {{ $json.output?.transactionType || 'Unknown' }}\nüíµ Amount: {{ $json.output?.currency || 'NGN' }} {{ $json.output?.amount || 0 }}\nüìù Description: {{ $json.output?.description || 'No description' }}\nüìÖ Date: {{ $json.output?.extractedDate || 'Unknown date' }}\n‚úÖ Status: {{ $json.output?.status || 'Unknown' }}\nüìä Category: {{ $json.output?.category || 'Unknown' }}\nüéØ Confidence: {{ Math.round(($json.output?.confidence || 0) * 100) }}%",
        "replyMarkup": "forceReply",
        "forceReply": {},
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -576,
        1744
      ],
      "id": "a0921268-e573-44b0-8ba1-4be6fc3c3c92",
      "name": "Send Transaction Alert2",
      "webhookId": "55d7eaf5-8f23-4d06-8490-f40dd7b8566b",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4",
          "mode": "list",
          "cachedResultName": "TRans Analy",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Transactions",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1CfREeD91_aTdVfjxxwoHJMfIxGuohdTU454k86paML4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $('Format Transaction Data').item.json.output.extractedDate }}",
            "Transaction Type": "={{ $('Format Transaction Data').item.json.output.transactionType }}",
            "Amount": "={{ $('Format Transaction Data').item.json.output.amount }}",
            "Currency": "={{ $('Format Transaction Data').item.json.output.currency }}",
            "Status": "={{ $('Format Transaction Data').item.json.output.status }}",
            "Description": "={{ $('Format Transaction Data').item.json.output.description }}",
            "Category": "={{ $('Format Transaction Data').item.json.output.category }}",
            "Confidence": "={{ $('Format Transaction Data').item.json.output.confidence }}",
            "Account No": "={{ $('Format Transaction Data').item.json.output.transferredTo }}",
            "Tansaction No\t": "={{ $('Format Transaction Data').item.json.output.transactionId }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Transaction Type",
              "displayName": "Transaction Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Amount",
              "displayName": "Amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Currency",
              "displayName": "Currency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Confidence",
              "displayName": "Confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Tansaction No\t",
              "displayName": "Tansaction No\t",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Account No",
              "displayName": "Account No",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -272,
        1744
      ],
      "id": "0d4c8997-c538-4d45-bc0e-552dc48d7d73",
      "name": "Append or update row in sheet"
    },
    {
      "parameters": {
        "modelName": "models/gemma-3-12b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1280,
        2016
      ],
      "id": "31042392-f183-4ece-b5a7-6d871033b32c",
      "name": "Model Fallback"
    },
    {
      "parameters": {
        "modelName": "models/gemma-3-12b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -944,
        2256
      ],
      "id": "a43c69e3-25c5-4117-8191-6023b645ece2",
      "name": "Model Fallback1"
    }
  ],
  "pinData": {},
  "connections": {
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain 2": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Basic LLM Chain 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain 2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain 2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get a message": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Get a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger [24H]": {
      "main": [
        [
          {
            "node": "Get many tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Telegram 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields ": {
      "main": [
        [
          {
            "node": "Aggregate 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate 3": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send a message in Gmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Download file in Google Drive": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages in Gmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create a task in Google Tasks": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update a task in Google Tasks1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many tasks": {
      "main": [
        [
          {
            "node": "Edit Fields ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many tasks in Google Tasks": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get a task in Google Tasks": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete a task in Google Tasks": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter Bank Messages": {
      "main": [
        [
          {
            "node": "Basic LLM Chain 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger1": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain ": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain ",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain ",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages": {
      "main": [
        [
          {
            "node": "Filter Bank Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Basic LLM Chain ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain 3": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain 3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain 3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Format Transaction Data": {
      "main": [
        [
          {
            "node": "Send Transaction Alert2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model 2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain 5",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Content Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain 5",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Weekly Report Trigger": {
      "main": [
        [
          {
            "node": "Get Weekly Transactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Weekly Transactions": {
      "main": [
        [
          {
            "node": "Calculate Weekly Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Weekly Summary": {
      "main": [
        [
          {
            "node": "Send Weekly Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Weekly Report": {
      "main": [
        [
          {
            "node": "Save Weekly Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Bank Messages2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain 5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger4": {
      "main": [
        [
          {
            "node": "Get many messages2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages2": {
      "main": [
        [
          {
            "node": "Filter Bank Messages2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain 5": {
      "main": [
        [
          {
            "node": "Format Transaction Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Transaction Alert2": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model Fallback": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain 5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Model Fallback1": {
      "ai_languageModel": [
        [
          {
            "node": "Content Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4ccaa702-89f5-40ef-9368-f84d388ebe5f",
  "meta": {
    "instanceId": "8d0680c4eee75276f104fe2b253dd4a6fe12b529dee7ac6dcb1dda00b9540fc7"
  },
  "id": "NT5rCc7LmECekgB2",
  "tags": []
}